from collections import deque
def levit(graph, start):
    # вершины, расстояние до которых и соседей которых уже рассчитывалось
    m0 = []

    # вершины, расстояние до соседей которых надо рассчитать
    m1 = deque()
    
    # вершины, расстояние до которых еще не рассчитывалось
    m2 = [i for i in graph.keys()]
    
    m1.append(m2.pop(m2.index(start)))
    
    dist = {}
    # Устанавливаем расстояние до всех вершин равным бесконечности
    for vertex in graph:
        dist[vertex] = float("inf")
    dist[start] = 0  # Расстояние до начальной вершины равно 0

    while m1:
        u = m1.popleft()     
        for (v, w) in graph[u].items(): 
            # путь к этой вершине раньше не вычислялся
            if v in m2:
                dist[v] = dist[u] + w
            
                m2.remove(v)
                m1.append(v)
                
            # путь к этой вершине уже вычислялся, но к её соседям - нет
            elif v in m1:
                # сохраняем более короткий путь
                if dist[v] > dist[u] + w:
                    dist[v] = dist[u] + w
                    
            
            # пути от этой вершины к её соседям уже вычислялись
            elif v in m0:
                # сохраняем более короткий путь
                if dist[v] > dist[u] + w:
                    dist[v] = dist[u] + w
                    
                    m0.remove(v)
                    # отправляем вершину на перерасчёт всех путей к её соседям
                    m1.appendleft(v)

        # расчёт путей до соседей окончен
        m0.append(u)
    return dist

# Пример использования

graph = {
    'A': {'B': 6, 'C': 3, 'D' : -2},
    'B': {'C': 2, 'D': 5},
    'C': {'F': 4},
    'D': {'E': -3},
    'E': {'F': -5},
    'F': {'B': 4}
}

start_node = 'A'
result = levit(graph, start_node)
print(result)
