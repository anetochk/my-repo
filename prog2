from collections import deque

def bfs_shortest_paths(graph, start):
    # Инициализируем словарь с расстояниями и предками
    distances = {vertex: float('inf') for vertex in graph}
    distances[start] = 0
    
    parents = {vertex: None for vertex in graph}  # Словарь для предков

    # Инициализируем очередь для BFS
    queue = deque([start])

    while queue:
        current = queue.popleft()
        
        # Обходим всех соседей текущей вершины
        for neighbor in graph[current]:
            # Если соседняя вершина еще не посещена (расстояние inf)
            if distances[neighbor] == float('inf'):
                # Устанавливаем расстояние как расстояние до текущей вершины + 1
                distances[neighbor] = distances[current] + 1
                parents[neighbor] = current  # Запоминаем предка
                queue.append(neighbor)

    return distances, parents

def reconstruct_path(parents, start, end):
    path = []
    current = end
    while current is not None:
        path.append(current)
        current = parents[current]
    return path[::-1]

# Пример использования (граф задан в виде списка смежности)
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B', 'G'],
    'E': ['B', 'F'],
    'F': ['C', 'E'],
    'G': ['D']
}
start = "A"
shortest_paths, parents = bfs_shortest_paths(graph, start)
print(f"Кратчайшие расстояния от вершины {start}:")
for vertex, distance in shortest_paths.items():
    if distance == float('inf'):
        print(f"До вершины {vertex} нет пути.")
    else:
        print(f"Расстояние до вершины {vertex}: {distance}")
        path = reconstruct_path(parents, start, vertex)
        print(f"Путь до вершины {vertex}: {' -> '.join(map(str, path))}")
